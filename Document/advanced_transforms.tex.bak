%
% Complete documentation on the extended LaTeX markup used for Insight
% documentation is available in ``Documenting Insight'', which is part
% of the standard documentation for Insight.  It may be found online
% at:
%
%     http://www.itk.org/

\documentclass{InsightArticle}

\usepackage[dvips]{graphicx}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  hyperref should be the last package to be loaded.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage[dvips,
bookmarks,
bookmarksopen,
backref,
colorlinks,linkcolor={blue},citecolor={blue},urlcolor={blue},
]{hyperref}

% Include packages for text modification
\usepackage{amsmath,amsfonts,amssymb}
\usepackage{bm}

% Include packages for citing
\usepackage[noadjust]{cite}

% Include packages for graphics
\usepackage{graphicx,psfrag}
\usepackage{subfigure}

% Include packages for tables
\usepackage{array,multirow}
\usepackage{ctable}

% Define new commands
\newcommand{\etal}{\emph{et al.}}
\newcommand{\vT}{\bm{T}}
\newcommand{\vmu}{\bm{\mu}}
\newcommand{\vTmu}{\bm{T_{\vmu}}}
\newcommand{\vTx}[1][]{\bm{T}_{#1}(\bm{x})}
\newcommand{\vTy}[1][]{\bm{T}_{#1}(\bm{y})}
\newcommand{\vx}[1][]{\bm{x}_{#1}}
\newcommand{\vxt}[1][]{\bm{\widetilde x}_{#1}}
\newcommand{\vy}[1][]{\bm{y}_{#1}}
\newcommand{\D}[2]{\frac{\partial #1}{\partial #2}}
\newcommand{\Dinl}[2]{\partial #1 / \partial #2}
\newcommand{\Dd}[3]{\frac{\partial^2 #1}{\partial #2 \partial #3}}
\newcommand{\Ddinl}[3]{\partial^2 #1 / \partial #2 \partial #3}
\newcommand{\elastix}{\texttt{elastix}}
\newcommand{\trp}{^{\dagger}}


%  This is a template for Papers to the Insight Journal.
%  It is comparable to a technical report format.

% The title should be descriptive enough for people to be able to find
% the relevant document.
\title{itk::Transforms supporting spatial derivatives}

%
% NOTE: This is the last number of the "handle" URL that
% The Insight Journal assigns to your paper as part of the
% submission process. Please replace the number "1338" with
% the actual handle number that you get assigned.
%
\newcommand{\IJhandlerIDnumber}{1338}

% Increment the release number whenever significant changes are made.
% The author and/or editor can define 'significant' however they like.
\release{1.0}

% At minimum, give your name and an email address.  You can include a
% snail-mail address if you like.
\author{Marius Staring$^{1}$ and Stefan Klein$^{2}$}
\authoraddress{$^{1}$Division of Image Processing, Leiden University Medical Center, Leiden, The Netherlands\\
               $^{2}$Biomedical Imaging Group Rotterdam, Departments of Radiology \& Medical Informatics, Erasmus MC, Rotterdam, The Netherlands}

\begin{document}

%
% Add hyperlink to the web location and license of the paper.
% The argument of this command is the handler identifier given
% by the Insight Journal to this paper.
%
\IJhandlefooter{\IJhandlerIDnumber}


\ifpdf
\else
   %
   % Commands for including Graphics when using latex
   %
   \DeclareGraphicsExtensions{.eps,.jpg,.gif,.tiff,.bmp,.png}
   \DeclareGraphicsRule{.jpg}{eps}{.jpg.bb}{`convert #1 eps:-}
   \DeclareGraphicsRule{.gif}{eps}{.gif.bb}{`convert #1 eps:-}
   \DeclareGraphicsRule{.tiff}{eps}{.tiff.bb}{`convert #1 eps:-}
   \DeclareGraphicsRule{.bmp}{eps}{.bmp.bb}{`convert #1 eps:-}
   \DeclareGraphicsRule{.png}{eps}{.png.bb}{`convert #1 eps:-}
\fi


\maketitle


\ifhtml
\chapter*{Front Matter\label{front}}
\fi


% The abstract should be a paragraph or two long, and describe the
% scope of the document.
\begin{abstract}
\noindent This document describes the use and implementation of
first and second order spatial derivatives of coordinate
transformations in the Insight Toolkit (\url{www.itk.org}). Spatial
derivatives are useful for many types of regularising or penalty
terms frequently used in image registration. These derivatives are
dubbed 'SpatialJacobian' and 'SpatialHessian' to distinguish with
the derivative to the transformation parameters themselves, which is
called `Jacobian' in the ITK.

In addition to the spatial derivatives, we derived and implemented
the derivatives to the registration/transform parameters of these
spatial derivatives, required for gradient descent type optimisation
routines. These derivatives are implemented in a sparse manner,
reducing the computation time for transformations which have local
support. All of these derivatives are implemented for the most
common ITK coordinate transformation, such as the rigid, affine and
B-spline transformation. In addition we derive formulae and code for
arbitrary compositions of transformations. The spatial derivatives
were subsequently exploited by implementing the bending energy
penalty term.

This paper is accompanied with the source code, input data,
parameters and output data that the authors used for validating the
algorithm described in this paper. This adheres to the fundamental
principle that scientific publications must facilitate
reproducibility of the reported results.
\end{abstract}

\IJhandlenote{\IJhandlerIDnumber}

\tableofcontents


\section{Introduction}

Image registration is the process of aligning images, and can be
defined as an optimisation problem \cite{KleinStaring:2010}:
\begin{align}
\hat \vmu &= \arg \min_{\vmu} \mathcal{C}(I_F, I_M;
\vmu),\label{eq:reg}
\end{align}
with $I_F$ and $I_M$ the $d$-dimensional fixed and moving image,
respectively, and $\vmu$ the vector of parameters of size $N$ that
parameterise the transformation $\vTmu = [T_{\vmu,1}, \ldots,
T_{\vmu,d}]\trp = [T_1, \ldots, T_d]\trp$, where we have dropped
$\vmu$ for short notation, and where $\trp$ denotes transposition.
The cost function $\mathcal{C}$ consists of a similarity measure
$\mathcal{S}(I_F, I_M; \vmu)$ that defines the quality of alignment.
Examples are the mean square difference, normalised correlation, and
mutual information measure. In order to regularise the
transformation $\vTmu$ often a penalty term $\mathcal{P}(\vmu)$ is
added to the cost function, so the problem becomes:
\begin{align}
\hat \vmu &= \arg \min_{\vmu} \mathcal{S}(I_F, I_M; \vmu) + \alpha
\mathcal{P}(\vmu),
\end{align}
where $\alpha$ is a user-defined constant that weighs similarity
against regularity.

Penalty term are often based on the first or second order spatial
derivatives of the transformation \cite{Rueckert99,Rohlfing03}. For
example the bending energy of the transformation, which is arguably
the most common penalty term, is defined in 2D as:
\begin{align}
\mathcal{P}_{\mathrm{BE}}(\vmu) &= \frac{1}{P} \sum_{\vxt[i]}
\left\| \frac{\partial^2 \vT}{\partial \vx \partial
\vx\trp}(\vxt[i]) \right\|_F^2 \\
&= \frac{1}{P} \sum_{\vxt[i]} \sum_{j = 1}^2 \left( \frac{\partial^2
T_j}{\partial x_1^2}(\vxt[i]) \right)^2  + 2 \left( \frac{\partial^2
T_j}{\partial x_1 \partial x_2}(\vxt[i]) \right)^2 + \left(
\frac{\partial^2 T_j}{\partial x_2^2}(\vxt[i]) \right)^2,
\end{align}
where $P$ is the number of points $\vxt[i]$, and the tilde denotes
the difference between a variable and a given point over which a
term is evaluated.

The optimisation problem (\ref{eq:reg}) is frequently solved using
an iterative gradient descent routine \cite{Klein07}:
\begin{align}
\vmu_{k+1} &= \vmu_k - a_k \frac{\partial \mathcal{C}}{\partial
\vmu} = \vmu_k - a_k \left( \frac{\partial \mathcal{S}}{\partial
\vmu} + \alpha \frac{\partial \mathcal{P}}{\partial \vmu}
\right),\label{eq:opt}
\end{align}
with $a_k$ a user-defined (or automatically determined
\cite{Klein09}) declining function that defines the step size.

The derivative of the similarity measure usually involves
computation of the spatial derivative of the moving image:
$\Dinl{I_M}{\vx}$, and the derivative of the transformation to its
parameters: $\Dinl{\vT}{\vmu}$. In the ITK the last derivative is
implemented using \code{transform->GetJacobian()}, i.e. the
derivative to the transformation parameters $\vmu$ is referred to as
`Jacobian'.

Penalty terms usually consist of the first and second order
\emph{spatial} derivatives of the transformation, i.e.
$\Dinl{\vT}{\vx}$ and $\Ddinl{\vT}{\vx}{\vx\trp}$. We will refer to
these derivatives as the `SpatialJacobian' and the `SpatialHessian'
to clearly distinguish between these derivatives and the `Jacobian'.
In order to apply the gradient descent optimisation routine
(\ref{eq:opt}), we additionally need the derivatives $\D{}{\vmu}
\Dinl{\vT}{\vx}$ and $\D{}{\vmu} \Ddinl{\vT}{\vx}{\vx\trp}$. These
we call the `JacobianOfSpatialJacobian' and
`JacobianOfSpatialHessian', respectively. See Table
\ref{tab:notation} for details.

\begin{table}[h]
\centering
\begin{tabular}{llll}
\toprule \toprule
Name & definition & matrix size & written out in 2D \\
\midrule \multicolumn{3}{l}{Transformation} \\
 & $\displaystyle \vT = \vT_{\vmu}(\widetilde \vx)$ & $\displaystyle d
\times 1$ & $\displaystyle \begin{bmatrix} \displaystyle
T_1(\widetilde \vx) \\ \displaystyle T_2(\widetilde \vx)
\end{bmatrix}$ \\[3ex]
\multicolumn{3}{l}{Jacobian} \\
 & $\displaystyle \frac{\partial \vT}{\partial \vmu}(\widetilde \vx)$ & $\displaystyle d \times N$ &
$\displaystyle
\begin{bmatrix}
  \displaystyle \frac{\partial T_1}{\partial \mu_1}(\widetilde \vx) & \displaystyle \cdots & \displaystyle \frac{\partial T_1}{\partial \mu_N}(\widetilde \vx) \\
  \displaystyle \frac{\partial T_2}{\partial \mu_1}(\widetilde \vx) & \displaystyle \cdots & \displaystyle \frac{\partial T_2}{\partial \mu_N}(\widetilde \vx) \\
\end{bmatrix}$ \\[3ex]
\multicolumn{3}{l}{SpatialJacobian} \\
 & $\displaystyle \frac{\partial \vT}{\partial \vx}(\widetilde \vx)$ & $\displaystyle
d \times d$ & $\displaystyle
\begin{bmatrix}
  \displaystyle \frac{\partial T_1}{\partial x_1}(\widetilde \vx) \frac{\partial T_1}{\partial x_2}(\widetilde \vx) \\
  \displaystyle \frac{\partial T_2}{\partial x_1}(\widetilde \vx) \frac{\partial T_2}{\partial x_2}(\widetilde \vx) \\
\end{bmatrix}$ \\[3ex]
\multicolumn{3}{l}{JacobianOfSpatialJacobian} \\
 & $\displaystyle \frac{\partial}{\partial \vmu} \frac{\partial \vT}{\partial
\vx}(\widetilde \vx)$ & $\displaystyle d \times d \times N$ &
$\displaystyle \begin{bmatrix}
  \displaystyle \frac{\partial}{\partial \mu_1} \frac{\partial \vT_{\vmu}}{\partial
\vx}(\widetilde \vx) & \displaystyle \cdots & \displaystyle
\frac{\partial}{\partial \mu_N} \frac{\partial \vT_{\vmu}}{\partial
\vx}(\widetilde \vx)
\end{bmatrix}$ \\[3ex]
\multicolumn{3}{l}{SpatialHessian} \\
 & $\displaystyle \frac{\partial^2 \vT}{\partial \vx
\partial \vx\trp}(\widetilde \vx)$ & $\displaystyle d \times d \times d$ & $\displaystyle \left\{ \begin{bmatrix}
  \displaystyle \frac{\partial^2 T_1}{\partial x_1 \partial x_1}(\widetilde \vx) \frac{\partial^2 T_1}{\partial x_2 \partial x_1}(\widetilde \vx) \\
  \displaystyle \frac{\partial^2 T_1}{\partial x_2 \partial x_1}(\widetilde \vx) \frac{\partial^2 T_1}{\partial x_2 \partial x_2}(\widetilde \vx) \\
\end{bmatrix}, \begin{bmatrix}
  \displaystyle \frac{\partial^2 T_2}{\partial x_1 \partial x_1}(\widetilde \vx) \frac{\partial^2 T_2}{\partial x_2 \partial x_1}(\widetilde \vx) \\
  \displaystyle \frac{\partial^2 T_2}{\partial x_2 \partial x_1}(\widetilde \vx) \frac{\partial^2 T_2}{\partial x_2 \partial x_2}(\widetilde \vx) \\
\end{bmatrix} \right\}$ \\[3ex]
\multicolumn{3}{l}{JacobianOfSpatialHessian} \\
 & $\displaystyle \frac{\partial}{\partial \vmu} \frac{\partial^2 \vT}{\partial \vx
\partial \vx\trp}(\widetilde \vx)$ & $\displaystyle d \times d \times d \times N$ &
$\displaystyle
\begin{bmatrix}
\displaystyle \frac{\partial}{\partial \mu_1} \frac{\partial^2
\vT_{\vmu}}{\partial \vx \partial \vx\trp}(\widetilde \vx) &
\displaystyle \cdots & \displaystyle \frac{\partial}{\partial \mu_N}
\frac{\partial^2 \vT_{\vmu}}{\partial \vx
\partial \vx\trp}(\widetilde \vx)
\end{bmatrix}$ \\
\bottomrule \bottomrule
\end{tabular}
\caption{Naming conventions and definitions for the transformation
and its derivatives used in this paper.}\label{tab:notation}
\end{table}

The paper is organised as follows: The interface of the proposed
functions, and the chosen data structures is described in Section
\ref{sec:interface}. In Sections \ref{sec:affine} and
\ref{sec:bspline} we give the mathematics for the 2D case of the
spatial derivatives for the affine and B-spline transform,
respectively. Attention is paid to the combination of multiple
transforms in Section \ref{sec:combo}. In that section, equations
are derived for the spatial derivatives, both for transformations
that are combined using addition as well as composition. Finally, in
Section \ref{sec:bendingenergy}, the spatial derivatives are
utilised for the computation of the value
$\mathcal{P}_{\mathrm{BE}}(\vmu)$ and derivative $\D{}{\vmu}
\mathcal{P}_{\mathrm{BE}}(\vmu)$ of the bending energy penalty term.
The described new functionality was released in the registration
toolkit \elastix\ \cite{KleinStaring:2010} previously. With this
contribution we hope to make the functionality available to a
greater audience.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Support for penalty terms in the ITK}\label{sec:interface}

The spatial derivative of the transform is not supported in the ITK.
We propose to add the following functions in the \doxygen{Transform}
class:
\begin{quote}
\begin{verbatim}
virtual void GetSpatialJacobian(
  const InputPointType &,
  SpatialJacobianType & ) const;

virtual void GetSpatialHessian(
  const InputPointType &,
  SpatialHessianType & ) const;

virtual void GetJacobianOfSpatialJacobian(
  const InputPointType &,
  JacobianOfSpatialJacobianType &,
  NonZeroJacobianIndicesType & ) const;

virtual void GetJacobianOfSpatialHessian(
  const InputPointType &,
  JacobianOfSpatialHessianType &,
  NonZeroJacobianIndicesType & ) const;
\end{verbatim}
\end{quote}
and additionally a function to implement a sparse version of the
Jacobian:
\begin{quote}
\begin{verbatim}
virtual void GetJacobian(
    const InputPointType &,
    JacobianType &,
    NonZeroJacobianIndicesType & ) const;
\end{verbatim}
\end{quote}

The ITK structures that were used to store the data are given in
Table \ref{tab:datastructures}. The Jacobian is of size $d \times
N$, and since the number of transformation parameters is flexible
for some transformations, the data structure used for storing the
Jacobian is an \doxygen{Array2D} object, which inherits from the
\code{vnl\_matrix}. This was already chosen previously in the ITK.
The SpatialJacobian is of fixed size $d \times d$, and therefore
(and for performance reasons) we choose to use the \doxygen{Matrix}
to store the SpatialJacobian, which inherits from the
\code{vnl\_matrix\_fixed}. For derivatives to $\vmu$ we choose to
use the \code{std::vector}. The SpatialHessian gives us some
problems, since we really need a 3D matrix, but currently no such
thing exists in the ITK or in vnl. Therefore, we opt for an
\doxygen{FixedArray} of \doxygen{Matrix}'s.

\begin{table}[tb]
\centering
\begin{tabular}{ll}
\toprule \toprule
Name & ITK structure \\
\midrule %Transformation &  \\
Jacobian & \code{Array2D = vnl\_matrix} \\
SpatialJacobian & \code{Matrix = vnl\_matrix\_fixed} \\
JacobianOfSpatialJacobian & \code{std::vector< Matrix >} \\
SpatialHessian & \code{FixedArray< Matrix >}\footnotemark \\
JacobianOfSpatialHessian & \code{std::vector< FixedArray< Matrix > >} \\
NonZeroJacobianIndices & \code{std::vector< unsigned long >} \\
\bottomrule \bottomrule
\end{tabular}
\caption{The ITK structures that store the
data.}\label{tab:datastructures}
\end{table}
\footnotetext{by lack of a good 3D matrix structure}

%From the function definitions above, notice that we chose to pass
%the variables by reference, and as function arguments. The
%\code{GetJacobian} in the \doxygen{Transform} is defined as:
%\begin{quote}
%\begin{verbatim}
%virtual const JacobianType & GetJacobian( const InputPointType & ) const;
%\end{verbatim}
%\end{quote}
%which returns a reference to the member variable \code{m\_Jacobian}.
%It is possible, however, that this member is only valid for the
%input point, namely for transformations with a derivative dependent
%of the spatial position. Therefore, we think that it should not be
%possible to access this parameter at a later time, when the input
%point has possibly changed.

Notice the \code{NonZeroJacobianIndicesType} in the function
definitions. These are meant for the support of sparse
\code{Jacobians}, \code{JacobianOfSpatialJacobians}, etc. For local
transformations like the B-spline, only a small subset of the
parameters $\vmu$ are needed to compute $\vTmu(\vx)$ for a given
coordinate $\vx$, see Figure \ref{fig:sparsejac}. The same holds for
the the Jacobian $\D{\vT}{\vmu}$, the JacobianOfSpatialJacobian
$\D{}{\vmu} \D{\vT}{\vx}$, and the JacobianOfSpatialHessian
$\D{}{\vmu} \Dd{\vT}{\vx}{\vx\trp}$. For some transformations, e.g.
the affine transform, the SpatialHessian or the
JacobianOfSpatialHessian are completely filled with zeros. For
computational purposes the following functions were therefore added
\begin{quote}
\begin{verbatim}
/** Whether the advanced transform has nonzero matrices. */
itkGetConstMacro( HasNonZeroSpatialHessian, bool );
itkGetConstMacro( HasNonZeroJacobianOfSpatialHessian, bool );
\end{verbatim}
\end{quote}
These functions allow skipping parts of a computation involving
these matrices.

\begin{figure}[tb]
\centering
\includegraphics[width=10cm]{images/jacobian.eps}
\caption{Illustrating sparse Jacobians. The top matrix shows the
non-zero entries of the full Jacobian matrix. The same information
can be represented shorter by only storing these non-zero entries
and the corresponding indices (nzji), see bottom two images. Image
courtesy of M. Motes.} \label{fig:sparsejac}
\end{figure}

As a side note, in the ITK \code{GetJacobian()} is declared as:
\begin{quote}
\begin{verbatim}
virtual const JacobianType & GetJacobian( const InputPointType  & ) const;
\end{verbatim}
\end{quote}
and the result is stored in a protected member variable
\code{m\_Jacobian}. Although only subclasses can access this member,
it should be noted that the result is only valid in combination with
the provided input point, for transformations with a derivative
dependent on the spatial position, which are most. Therefore, it may
be better to remove this member variable altogether.

We have implemented the above for many of the \doxygen{Transform}'s,
in new classes which are copies of the original ITK classes. The
names of the new classes are prepended with `Advanced'. In the end
it would be best to integrate the new functionality in the original
ITK classes. Advanced versions of the \doxygen{IdentityTransform},
\doxygen{Rigid2DTransform}, \doxygen{Rigid3DTransform},
\doxygen{MatrixOffsetTransformBase},
\doxygen{BSplineDeformableTransform}, and additionally for the
\doxygen{CombinationTransform} (see \cite{Klein06}) are available.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Affine transformation}\label{sec:affine}

For the affine transformation, the derivatives evaluate to the
following in 2D:
\begin{align}
\vT(\vxt) &= A (\vx -\bm{c}) + \bm{t} + \bm{c} =
\begin{bmatrix} a_{11} & a_{12}
\\ a_{21} & a_{22} \end{bmatrix} \begin{bmatrix} x_1 - c_1 \\
x_2 - c_2 \end{bmatrix} + \begin{bmatrix} t_1 + c_1 \\
t_2 + c_2 \end{bmatrix} \\
 & = \begin{bmatrix} \mu_0 & \mu_1 \\
 \mu_2 & \mu_3 \end{bmatrix} \begin{bmatrix} x_1 - c_1 \\
x_2 - c_2 \end{bmatrix} + \begin{bmatrix} \mu_4 + c_1 \\
\mu_5 + c_2
\end{bmatrix}, \\
\intertext{with $A$ a matrix, $\bm{c}$ the center of rotation, and
$\bm{t}$ a translation. Then} \D{\vT}{\vmu}(\vxt) &=
\begin{bmatrix} \widetilde x_1 - c_1 & \widetilde x_2 - c_2 & 0 & 0 & 1 & 0 \\
0 & 0 & \widetilde x_1 - c_1 & \widetilde x_2 - c_2 & 0 &
1 \end{bmatrix}, \\
\D{\vT}{\vx}(\vxt) &= \begin{bmatrix} \mu_0 & \mu_1 \\ \mu_2 & \mu_3 \end{bmatrix}, \\
\Dd{\vT}{\vx}{\vx\trp}(\vxt) &= O_{d \times d \times d}, \\
\D{}{\vmu} \D{\vT}{\vx}(\vxt) &= \left\{ \begin{bmatrix} 1 & 0 \\
0 & 0 \end{bmatrix}, \begin{bmatrix} 0 & 1 \\ 0 & 0
\end{bmatrix}, \begin{bmatrix} 0 & 0 \\ 1 & 0
\end{bmatrix}, \begin{bmatrix} 0 & 0 \\ 0 & 1
\end{bmatrix}, O_{d \times d}, O_{d \times d} \right\}, \\
\D{}{\vmu} \Dd{\vT}{\vx}{\vx\trp}(\vxt) &= O_{d \times d \times d
\times N},
\end{align}
where $O_s$ is a zero matrix of size $s$.

The \code{GetJacobianOfSpatialJacobian()} returns
\code{nonZeroJacobianIndices} = $[ 0, 1, 2, 3, 4, 5 ]$, since
$\Dinl{\vT}{\mu_i}$ is nonzero for all $i$. The internal booleans
\code{m\_HasNonZeroSpatialHessian} and
\code{m\_HasNonZeroJacobianOfSpatialHessian} are set to \code{false}
for the affine transform. The implementation of the penalty term is
assumed to check for these booleans. In case of an affine transform
the penalty term can simply return zero. This is a performance
benefit compared to walking over the zero matrix, and adding and
multiplying everything, which in the end also gives zero.

These derivatives are implemented in the
\doxygen{AdvancedMatrixOffsetTransformBase} class.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{B-spline transformation}\label{sec:bspline}

A transformation parameterised by third order B-splines can be
written in 2D as follows:
\begin{align}
\vT(\vxt) &= \begin{bmatrix} T_1(\vxt) \\ T_2(\vxt)
\end{bmatrix} = \begin{bmatrix} \widetilde{x}_1 \\ \widetilde{x}_2 \end{bmatrix}
 + \begin{bmatrix} \sum_{i} \mu_{i1} \beta^3 \left(
\frac{ \widetilde{x}_1 - x_{1}^i}{\sigma_1} \right)
\beta^3 \left( \frac{\widetilde{x}_2 - x_{2}^i}{\sigma_2}\right) \\
 \sum_{i} \mu_{i2} \beta^3 \left( \frac{ \widetilde{x}_1 - x_{1}^i}
 {\sigma_1} \right) \beta^3 \left( \frac{\widetilde{x}_2 - x_{2}^i}{\sigma_2} \right)
\end{bmatrix},
\end{align}
with $\vx^i$ the control points within the support of the B-spline
basis functions $\beta^3(\cdot)$, $\sigma_1$ and $\sigma_2$ the
B-spline grid spacing, and $\vmu = (\mu_{0,1}, \ldots, \mu_{S-1,1},
\mu_{0,2}, \ldots, \mu_{S-1,2})$ the B-spline parameters, with $S =
(3+1)^d$ the number of control points in the support of the
multi-dimensional third order B-spline.

For short notation, define:
\begin{align}
b_{33}^{i} &= \beta^3\left( (\widetilde{x}_1 - x_{1}^i) / \sigma_1
\right) \cdot \beta^3 \left( (\widetilde{x}_2 - x_{2}^i) / \sigma_2
\right), \\
b_{23}^{i} &= \left[ \beta^2 \left( (\widetilde{x}_1 -
x_{1}^i)/\sigma_1 + \tfrac{1}{2} \right) - \beta^2 \left(
(\widetilde{x}_1 - x_{1}^i)/\sigma_1 - \tfrac{1}{2} \right) \right]
\cdot \beta^3 \left( (\widetilde{x}_2 - x_{2}^i)/\sigma_2 \right) /
\sigma_1, \\
b_{32}^{i} &= \beta^3 \left( (\widetilde{x}_1 - x_{1}^i)/\sigma_1
\right) \cdot \left[ \beta^2 \left( (\widetilde{x}_2 -
x_{2}^i)/\sigma_2 + \tfrac{1}{2} \right) - \beta^2 \left( (
\widetilde{x}_2 - x_{2}^i)/\sigma_2 - \tfrac{1}{2} \right) \right] /
\sigma_2, \\
\begin{split}
b_{22}^{i} &= \left[ \beta^2 \left( ( \widetilde{x}_1 -
x_{1}^i)/\sigma_1 + \tfrac{1}{2} \right) - \beta^2 \left( (
\widetilde{x}_1 - x_{1}^i)/\sigma_1 - \tfrac{1}{2} \right) \right] \\
& \qquad \qquad \cdot \left[ \beta^2 \left( ( \widetilde{x}_2 -
x_{2}^i)/\sigma_2 + \tfrac{1}{2} \right) - \beta^2 \left( (
\widetilde{x}_2 - x_{2}^i)/\sigma_2 - \tfrac{1}{2} \right) \right] /
(\sigma_1 \sigma_2),
\end{split} \\
b_{13}^{i} &= \left[ \beta^1 \left( (\widetilde{x}_1 -
x_{1}^i)/\sigma_1 + 1 \right) - 2 \beta^1 \left( ( \widetilde{x}_1 -
x_{1}^i)/\sigma_1 \right) + \beta^1 \left( (\widetilde{x}_1 -
x_{1}^i)/\sigma_1 - 1 \right) \right] \cdot \beta^3 \left(
(\widetilde{x}_2 - x_{2}^i)/\sigma_2 \right) / \sigma_1^2, \\
b_{31}^{i} &= \beta^3 \left( (\widetilde{x}_1 - x_{1}^i)/\sigma_1
\right) \cdot \left[ \beta^1 \left( (\widetilde{x}_2 -
x_{2}^i)/\sigma_2 + 1 \right) - 2 \beta^1 \left( ( \widetilde{x}_2 -
x_{2}^i)/\sigma_2 \right) + \beta^1 \left( (\widetilde{x}_2 -
x_{2}^i)/\sigma_2 - 1 \right) \right] / \sigma_2^2.
\end{align}
From these equations we derive:
\begin{align}
% Jacobian dT/dmu
\D{\vT}{\vmu}(\vxt) &= \begin{bmatrix} b_{33}^{0} & \cdots &
b_{33}^{S-1} & 0 & \cdots & 0 \\ 0 & \cdots & 0 & b_{33}^{0} &
\cdots & b_{33}^{S-1} \end{bmatrix}, \\
% spatial Jacobian dT/dx
\D{\vT}{\vx}(\vxt) &= \begin{bmatrix} 1 + \sum_i \mu_{i1} b_{23}^i &
\sum_i \mu_{i1} b_{32}^i \\ \sum_i \mu_{i2} b_{23}^{i} & 1 + \sum_i
\mu_{i2} b_{32}^{i} \end{bmatrix}, \\
% spatial Hessian d2T/dx2
\Dd{\vT}{\vx}{\vx\trp}(\vxt) &= \left\{ \begin{bmatrix} \sum_i
\mu_{i1} b_{13}^i & \sum_i \mu_{i1} b_{22}^i \\ \sum_i \mu_{i1}
b_{22}^{i} & \sum_i \mu_{i1} b_{31}^{i} \end{bmatrix},
\begin{bmatrix} \sum_i \mu_{i2} b_{13}^{i} & \sum_i \mu_{i2}
b_{22}^{i} \\ \sum_i \mu_{i2} b_{22}^{i} & \sum_i \mu_{i2}
b_{31}^{i} \end{bmatrix} \right\} \\
% Jacobian of spatial Jacobian d/dmu dT/dx
\D{}{\vmu} \D{\vT}{\vx}(\vxt) &= \left\{ \begin{bmatrix} b_{23}^{0}
& b_{32}^{0} \\ 0 & 0 \end{bmatrix}, \cdots, \begin{bmatrix}
b_{23}^{S-1} & b_{32}^{S-1} \\ 0 & 0 \end{bmatrix},
\begin{bmatrix} 0 & 0 \\ b_{23}^{0} & b_{32}^{0} \end{bmatrix},
\cdots,
\begin{bmatrix} 0 & 0 \\ b_{23}^{S-1} & b_{32}^{S-1} \end{bmatrix} \right\} \\
% Jacobian of spatial Hessian d/dmu d2T/dx2
\D{}{\vmu} \Dd{\vT}{\vx}{\vx\trp}(\vxt) &= \left\{ \left\{
\begin{bmatrix} b_{13}^0 & b_{22}^0 \\ b_{22}^0 & b_{31}^0 \end{bmatrix},
O_{d \times d} \right\}, \cdots, \left\{ \begin{bmatrix}
b_{13}^{S-1} & b_{22}^{S-1} \\ b_{22}^{S-1} & b_{31}^{S-1}
\end{bmatrix}, O_{d
\times d} \right\}, \right. \\
& \qquad \left. \left\{ O_{d \times d},
\begin{bmatrix} b_{13}^{0} & b_{22}^{0} \\ b_{22}^{0} &
b_{31}^{0} \end{bmatrix} \right\}, \cdots, \left\{ O_{d \times d},
\begin{bmatrix} b_{13}^{S-1} & b_{22}^{S-1} \\ b_{22}^{S-1} &
b_{31}^{S-1} \end{bmatrix} \right\} \right\}.
\end{align}

These derivatives are implemented in the
\doxygen{AdvancedBSplineDeformableTransform} class. In addition, we
needed some helper classes, such as the
\begin{quote}
\doxygen{BSplineInterpolationWeightFunctionBase}, \\
\doxygen{BSplineInterpolationDerivativeWeightFunction}, \\
\doxygen{BSplineInterpolationSecondOrderDerivativeWeightFunction},
\end{quote}
which implement the B-spline interpolation weights $b^i$ from above.
Furthermore, we changed some of the existing B-spline kernel
functions and interpolators for some performance enhancements:
\begin{quote}
\doxygen{BSplineInterpolationWeightFunction2}, \\
\doxygen{BSplineKernelFunction2}, \\
\doxygen{BSplineDerivativeKernelFunction2}, \\
\doxygen{BSplineSecondOrderDerivativeKernelFunction2}.
\end{quote}
For example the \doxygen{BSplineKernelFunction2} omits the
evaluation of if-statements, and the last two classes explicitly
write out the relationship $\D{\beta^o}{x}(x) =
\D{\beta^{o-1}}{x}(x+\tfrac{1}{2}) -
\D{\beta^{o-1}}{x}(x-\tfrac{1}{2})$.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Combining transformations}\label{sec:combo}

In the Insight Journal submission \cite{Klein06} we proposed the
class \doxygen{CombinationTransform} for combining multiple
transformations by addition or composition. Adding transformations
is done via:
\begin{align}
\vTx &= \vTx[0] + \vTx[1] - \vx,\label{eq:Tadd}
\end{align}
where $\vTx[0]$ is the initial transformation and $\vTx[1]$ the
current transformation. As explained in \cite{Klein06} only the
current transformation is optimised during the registration.
Composition of transformations is defined by:
\begin{align}
\vTx &= \vT_1(\vTx[0]).\label{eq:Tcompose}
\end{align}
For these combined transformations we need to derive the relations
for the (spatial) derivatives. Define $\bm{y} = \vT_0(\vxt)$, then:

\begin{tabular}{lll}
\toprule \toprule
name & combo & formulae \\
\midrule
\multicolumn{3}{l}{Jacobian} \\
 & add & $\displaystyle \D{\vT}{\vmu}(\vxt) = \D{}{\vmu} \left(
\vT_0(\vxt) + \vT_1(\vxt) - \vxt \right) = \D{}{\vmu} \vT_1(\vxt)$ \\
 & compose & $\displaystyle \D{\vT}{\vmu}(\vxt) = \D{}{\vmu} \left( \vT_1(\vT_0(\vxt))
\right) = \D{}{\vmu} \vT_1(\bm{y})$ \\
\multicolumn{3}{l}{SpatialJacobian} \\
 & add & $\displaystyle \D{\vT}{\vx}(\vxt) = \D{}{\vx} \left(
\vT_0(\vxt) + \vT_1(\vxt) - \vxt \right) = \D{}{\vx} \vT_0(\vxt) +
\D{}{\vx} \vT_1(\vxt) - \bm{I}$ \\
 & compose & $\displaystyle \D{T_{k}}{x_i}(\vxt) = \left( \D{T_{1,k}}{\vx}(\vy)
 \right)\trp \D{\vT_0}{x_i}(\vxt) =  \left(\D{\vT_0}{x_i}(\vxt) \right)\trp
\D{T_{1,k}}{\vx}(\vy)$ \\
\multicolumn{3}{l}{JacobianOfSpatialJacobian} \\
 & add & $\displaystyle \D{}{\vmu} \D{\vT}{\vx}(\vxt) =
\D{}{\vmu} \D{}{\vx} \left( \vT_0(\vxt) + \vT_1(\vxt) - \vxt \right)
= \D{}{\vmu} \D{}{\vx} \vT_1(\vxt)$ \\
 & compose & $\displaystyle \D{}{\vmu} \D{\vT}{\vx}(\vxt) = \D{}{\vmu} \D{}{\vx} \left( \vT_1(\vTx[0])
\right) = \D{}{\vmu} \D{}{\vx} \vT_1(\bm{y}) \cdot \D{}{\vx} \vT_0(\vxt)$ \\
\multicolumn{3}{l}{SpatialHessian} \\
 & add & $\displaystyle \Dd{\vT}{x_i}{x_j}(\vxt) = \Dd{}{x_i}{x_j} \left(
\vT_0(\vxt) + \vT_1(\vxt) - \vxt \right) = \Dd{}{x_i}{x_j}
\vT_0(\vxt) + \Dd{}{x_i}{x_j} \vT_1(\vxt)$ \\
 & compose & $\displaystyle \Dd{T_{k}}{x_i}{x_j}(\vxt) = \left( \D{T_{1,k}}{\vx}(\vy)
\right)\trp \Dd{\vT_0}{x_i}{x_j}(\vxt) + \left(\D{\vT_0}{x_i}(\vxt)
\right)\trp\Dd{T_{1,k}}{\vx}{\vx\trp}(\bm{y}) \D{\vT_0}{x_j}(\vxt)$ \\
\multicolumn{3}{l}{JacobianOfSpatialHessian} \\
 & add & $\displaystyle \D{}{\vmu} \Dd{\vT}{x_i}{x_j}(\vxt) =
\D{}{\vmu} \Dd{}{x_i}{x_j} \left( \vT_0(\vxt) + \vT_1(\vxt) - \vxt
\right) = \D{}{\vmu} \Dd{}{x_i}{x_j} \vT_1(\vxt)$ \\
 & compose & $\displaystyle \D{}{\vmu} \Dd{T_{k}}{x_i}{x_j}(\vxt) =
\Dd{T_{1,k}}{\vmu}{\vx\trp}(\vy) \Dd{\vT_0}{x_i}{x_j}(\vxt) +
\left(\D{\vT_0}{x_i}(\vxt) \right)\trp \left(\D{}{\vmu}
\Dd{T_{1,k}}{\vx}{\vx\trp}(\bm{y})\right) \D{\vT_0}{x_j}(\vxt)$ \\
\bottomrule \bottomrule
\end{tabular}

%\begin{align}
%\intertext{Jacobian:} \D{\vTmu}{\vmu}(\vxt) &= \D{}{\vmu} \left(
%\vT_0(\vxt) + \vT_1(\vxt)
%- \vxt \right) = \D{}{\vmu} \vT_1(\vxt), \\
%\D{\vTmu}{\vmu}(\vxt) &= \D{}{\vmu} \left( \vT_1(\vT_0(\vxt))
%\right) = \D{}{\vmu} \vT_1(\bm{y}). \intertext{SpatialJacobian:}
%\D{\vTmu}{\vx}(\vxt) &= \D{}{\vx} \left( \vT_0(\vxt) + \vT_1(\vxt) -
%\vxt \right) = \D{}{\vx} \vT_0(\vxt) + \D{}{\vx} \vT_1(\vxt) - \bm{I}, \\
%%\D{\vTmu}{\vx}(\vxt) &= \D{}{\vx} \vT_1(\vT_0(\vxt)) = \D{}{\vx}
%%\vT_1(\bm{y}) \cdot \D{}{\vx} \vT_0(\vxt). \\
%\D{T_{\vmu,k}}{x_i}(\vxt) &= \left( \D{T_{1,k}}{\vx}(\vy) \right)^T
%\D{\vT_0}{x_i}(\vxt) =  \left(\D{\vT_0}{x_i}(\vxt) \right)^T
%\D{T_{1,k}}{\vx}(\vy) \intertext{JacobianOfSpatialJacobian:}
%\D{}{\vmu} \D{\vTmu}{\vx}(\vxt) &= \D{}{\vmu} \D{}{\vx} \left(
%\vT_0(\vxt) + \vT_1(\vxt) - \vxt \right) = \D{}{\vmu} \D{}{\vx}
%\vT_1(\vxt), \\
%\D{}{\vmu} \D{\vTmu}{\vx}(\vxt) &= \D{}{\vmu} \D{}{\vx} \left(
%\vT_1(\vTx[0]) \right) = \D{}{\vmu} \D{}{\vx} \vT_1(\bm{y}) \cdot
%\D{}{\vx} \vT_1(\bm{y})\vT_0(\vxt). \intertext{SpatialHessian:}
%\Dd{\vTmu}{x_i}{x_j} &= \Dd{}{x_i}{x_j} \left( \vT_0(\vxt) +
%\vT_1(\vxt) \right) = \Dd{}{x_i}{x_j} \vT_0(\vxt) +
%\Dd{}{x_i}{x_j} \vT_1(\vxt), \\
%%\Dd{\vTmu}{x_i}{x_j} &= \Dd{}{x_i}{x_j} \left( \vT_1(\vT_0(\vxt))
%%\right) = \D{}{x_i} \vT_0(\vxt) \Dd{}{x_i}{x_j} \vT_1(\bm{y})
%%\D{}{x_j} \vT_0(\vxt) + \Dd{}{x_i}{x_j} \vT_0(\vxt) \D{}{x_j}
%%\vT_1(\bm{y}). \\
%\Dd{T_{\vmu,k}}{x_i}{x_j}(\vxt) &= \left( \D{T_{1,k}}{\vx}(\vy)
%\right)^T \Dd{\vT_0}{x_i}{x_j}(\vxt) + \left(\D{\vT_0}{x_i}(\vxt)
%\right)^T \Dd{T_{1,k}}{\vx}{\vx^T}(\bm{y}) \D{\vT_0}{x_j}(\vxt)
%\intertext{JacobianOfSpatialHessian:} \D{}{\vmu}
%\Dd{\vTmu}{x_i}{x_j} &= \D{}{\vmu} \Dd{}{x_i}{x_j} \left(
%\vT_0(\vxt) + \vT_1(\vxt) - \vxt \right) = \D{}{\vmu}
%\Dd{}{x_i}{x_j} \vT_1(\vxt), \\
%%\D{}{\vmu} \Dd{\vTmu}{\vx}{\vx^T} &= \D{}{\vmu} \Dd{}{x_i}{x_j}
%%\left( \vT_1(\vT_0(\vxt)) \right) \\
%% &= \D{}{x_i} \vT_0(\vxt) \D{}{\vmu} \Dd{}{x_i}{x_j} \vT_1(\bm{y})
%%\D{}{x_j} \vT_0(\vxt) + \Dd{}{x_i}{x_j} \vT_0(\vxt) \D{}{\vmu}
%%\D{}{x_j} \vT_1(\bm{y}). \\
%\D{}{\vmu} \Dd{T_{mu,k}}{x_i}{x_j}(\vxt) &=
%\Dd{T_{1,k}}{\vmu}{\vx^T}(\vy) \Dd{\vT_0}{x_i}{x_j}(\vxt) +
%\left(\D{\vT_0}{x_i}(\vxt) \right)^T \left(\D{}{\vmu}
%\Dd{T_{1,k}}{\vx}{\vx^T}(\bm{y})\right) \D{\vT_0}{x_j}(\vxt)
%\end{align}

These derivatives are implemented in the
\doxygen{AdvancedCombinationTransform} class.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Bending energy penalty term}\label{sec:bendingenergy}

To showcase the use of these spatial derivatives we implemented the
bending energy penalty term, which was defined as:
\begin{align}
\mathcal{P}_{\mathrm{BE}}(\vmu) &= \frac{1}{P} \sum_{\vxt[i]}
\sum_{k,l,m = 1}^2 \left( \Dd{T_k}{x_l}{x_m}(\vxt[i]) \right)^2.
\end{align}

We constructed an \doxygen{TransformBendingEnergyPenaltyTerm} which
(finally) inherits from the \doxygen{ImageToImageMetric}. The
\code{GetValue()}-method is implemented like:
\begin{quote}
\begin{verbatim}
SpatialHessianType spatialHessian;
for all samples
  this->GetTransform()->GetSpatialHessian( sample, spatialHessian );
  for all k, l, m
    measure += spatialHessian[ k ][ l ][ m ]^2;
  end
end
measure /= numberOfSamples;
\end{verbatim}
\end{quote}

For the \code{GetValueAndDerivative()} we have:
\begin{align}
\D{}{\vmu} \mathcal{P}_{\mathrm{BE}}(\vmu) &=  \frac{1}{P}
\sum_{\vxt[i]} \sum_{k,l,m = 1}^2 2 \Dd{T_k}{x_l}{x_m} (\vxt[i])
\D{}{\vmu} \Dd{T_k}{x_l}{x_m}(\vxt[i]),
\end{align}
which is implemented like:
\begin{quote}
\begin{verbatim}
SpatialHessianType spatialHessian;
JacobianOfSpatialHessianType jacobianOfSpatialHessian;
for all samples
  this->GetTransform()->GetSpatialHessian( sample, spatialHessian );
  this->GetTransform()->GetJacobianOfSpatialHessian( sample,
    jacobianOfSpatialHessian, nonZeroJacobianIndices );
  for all nonZeroJacobianIndices, k, l, m
    derivative[ nonZeroJacobianIndices[ mu ] ] += 2.0
      * spatialHessian[ k ][ i ][ j ]
      * jacobianOfSpatialHessian[ mu ][ k ][ i ][ j ];
  end
end
derivative /= numberOfSamples;
\end{verbatim}
\end{quote}

It must be noted that the
\doxygen{TransformBendingEnergyPenaltyTerm} class inherits from a
derived version of the \doxygen{ImageToImageMetric} class, which
adds support for image samplers. The image sampling framework is
described in another Insight Journal paper, see \cite{Staring10}. As
such the compilation of this class will only succeed in combination
with these `enhanced' classes.

%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Discussion and Conclusion}

This document describes the use and implementation of spatial
derivatives of coordinate transformations in the ITK. In addition,
the derivatives to the transformation parameters of these spatial
derivatives are given, required for gradient descent like
optimisation routines. The latter are implemented in a sparse
manner. We created new versions of the identity, rigid, affine and
B-spline transformation. Also, combinations of transformations
benefit from the proposed enhancements.

The spatial derivatives were subsequently exploited by the bending
energy penalty term. Their usage is, however, not limited to that
penalty term, and many more penalty terms can be implemented using
the new functionality.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  Insert the bibliography using BibTeX
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\bibliographystyle{plain}
\bibliography{references}


\end{document}
